//
//  ComposeLayout.swift
//
//
//  Created by Sungcheol Kim on 2024/01/31.
//

import Foundation

#if os(iOS)
  import UIKit
#else
  import AppKit
#endif

/// A structure that defines a compositional layout for collection views.
///
/// This layout uses a custom layout builder to generate layout models based on section indices and the current environment.
public struct ComposeLayout {
  /// A closure that builds layout models for each section.
  @SectionBuilder
  private var layoutBuilder: (_ sectionIndex: Int, _ environment: NSCollectionLayoutEnvironment) -> ComposeLayoutModel

  /// An optional configuration for the compositional layout.
  private var configuration: PlatformCompositionalLayoutConfiguration?

  /// A dictionary to register decoration view classes with their associated kinds.
  private var decorationViewClasses: [String: AnyClass] = [:]

  /// Initializes a new `ComposeLayout` with a layout builder.
  ///
  /// - Parameter layout: A closure that takes a section index and an environment to produce a `ComposeLayoutModel`.
  public init(@ComposeLayoutBuilder layout: @escaping (_ sectionIndex: Int, _ environment: NSCollectionLayoutEnvironment) -> ComposeLayoutModel) {
    layoutBuilder = layout
  }

  /// Registers a class for use in creating decoration views of a specified kind.
  ///
  /// - Parameters:
  ///   - viewClass: The class of the decoration view to register.
  ///   - elementKind: The kind of decoration view to associate with the class.
  /// - Returns: A new `ComposeLayout` instance with the updated decoration view registration.
  public func register(_ viewClass: AnyClass, forDecorationViewOfKind elementKind: String) -> ComposeLayout {
    return mutable(self) { $0.decorationViewClasses[elementKind] = viewClass }
  }
}

// MARK: - Update Layout

public extension ComposeLayout {
  /// Applies a new configuration to the compositional layout and returns an updated instance.
  ///
  /// This method allows for the configuration of the compositional layout with a new `PlatformCompositionalLayoutConfiguration`. The configuration is applied to a copy of the current layout, ensuring immutability of the layout instances.
  ///
  /// - Parameter configuration: The new configuration to apply to the compositional layout.
  /// - Returns: A new `ComposeLayout` instance with the applied configuration.
  func using(configuration: PlatformCompositionalLayoutConfiguration) -> ComposeLayout {
    return mutable(self) { $0.configuration = configuration }
  }
}

// MARK: - Build Layout

public extension ComposeLayout {
  /// Builds and returns a `PlatformCompositionalLayout` configured with the layout models generated by the `layoutBuilder` and registers any decoration view classes.
  ///
  /// This method constructs a `PlatformCompositionalLayout` using a closure that takes a section index and an environment. It uses the `layoutBuilder` to generate a `ComposeLayoutModel` for each section and converts its sections into `NSCollectionLayoutSection`s. If the section index is beyond the range of available sections, it defaults to the last section's layout. Additionally, it registers any decoration view classes provided to the `ComposeLayout`.
  ///
  /// - Returns: A `PlatformCompositionalLayout` configured with the generated layout models and decoration view registrations.
  func build() -> PlatformCompositionalLayout {
    let layout = PlatformCompositionalLayout { sectionIndex, environment in
      let composeLayoutModel = layoutBuilder(sectionIndex, environment)
      return if sectionIndex < composeLayoutModel.sections.count {
        composeLayoutModel.sections[sectionIndex].toNSCollectionLayoutSection()
      } else {
        composeLayoutModel.sections.last?.toNSCollectionLayoutSection()
      }
    }

    decorationViewClasses.forEach { (key: String, value: AnyClass) in
        layout.register(value, forDecorationViewOfKind: key)
    }

    return layout
  }
}

// MARK: - Support List

#if !os(macOS)
  public extension ComposeLayout {
    /// Creates a list-based `PlatformCompositionalLayout` using the specified configuration.
    ///
    /// This method is available on iOS 14.0 and later. It constructs a list-based compositional layout by leveraging the `PlatformCompositionalLayout`'s list initializer, which takes a `UICollectionLayoutListConfiguration` object.
    ///
    /// - Parameter configuration: The configuration object specifying the layout of the list.
    /// - Returns: A `PlatformCompositionalLayout` configured as a list according to the provided configuration.
    @available(iOS 14.0, *)
    static func list(using configuration: UICollectionLayoutListConfiguration) -> PlatformCompositionalLayout {
      return PlatformCompositionalLayout.list(using: configuration)
    }
  }
#endif
